generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Usuario {
  id          String      @id @default(uuid()) @db.Uuid
  nome        String      @db.VarChar(250)
  email       String      @unique @db.VarChar(250)
  username    String      @unique @db.VarChar(60)
  senha       Int         @db.Integer()

  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime    @updatedAt @map("updated_at")

  tweets      Tweet[]
  likes       Like[]
  replies     Reply[]

  seguidores  Seguidor[]  @relation("Seguidores") // Quem o segue
  seguindo    Seguidor[]  @relation("Seguindo")   // Quem ele est√° seguindo

  @@map("usuarios")
}
model Tweet {
  id         String      @id @default(uuid()) @db.Uuid
  conteudo   String      @db.Text 
  tipo       TweetTipo   @default(Tweet)

  usuarioId  String      @map("usuario_id")  @db.Uuid
  usuario    Usuario     @relation(fields: [usuarioId], references: [id])

  createdAt  DateTime    @default(now()) @map("created_at")  @db.Timestamp
  updatedAt  DateTime    @updatedAt @map("updated_at")
                                                                               
  Like       Like[]      @relation(name: "TweetLikes")
  Reply      Reply[]     @relation(name: "TweetLikes")
  
  @@map("tweets")
}

enum TweetTipo {
  Tweet
  Reply
}
model Like {
  usuarioId   String      @map("usuario_id") @db.Uuid
  usuario     Usuario     @relation(fields: [usuarioId], references: [id])

  tweetId     String      @map("tweet_id") @db.Uuid
  tweet       Tweet       @relation(fields: [tweetId], references: [id], name: "TweetLikes")

  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@id([usuarioId, tweetId]) 
  @@map("likes")
}
model Reply {
  tweetId     String      @map("tweet_id") @db.Uuid
  tweet       Tweet       @relation(fields: [tweetId], references: [id], name: "TweetLikes")

  usuarioId   String      @map("usuario_id") @db.Uuid
  usuario     Usuario     @relation(fields: [usuarioId], references: [id])

  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@id([tweetId, usuarioId]) 
  @@map("replys")
}
model Seguidor {
  usuarioId   String      @map("usuario_id") @db.Uuid
  usuario     Usuario     @relation("Seguindo", fields: [usuarioId], references: [id])

  seguidorId  String      @map("seguidor_id") @db.Uuid
  seguidor    Usuario     @relation("Seguidores", fields: [seguidorId], references: [id])

  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@id([usuarioId, seguidorId]) 
  @@map("seguidores")
}

